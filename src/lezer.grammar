@top PhiGrammar {program}

@skip {SPACE | COMMENT}

@tokens {
    SPACE {std.whitespace+}
    COMMENT { HASH ![\r\n]* }
    
    HASH { "#" }
    NAME { $[a-z]($[a-z] | $[0-9] | $[_])* }
    META { PLUS NAME (SPACE ![\r\n]+)? }
    PLUS { "+" }
    BYTE { ($[0-9] | $[A-F])($[0-9] | $[A-F]) }

    REGEX { SLASH ![\r\n]+ SLASH $[a-z]* }

    STAR { "*" }
    DOTS { "..." }
    CONST { "!" }
    SLASH { "/" }
    COLON { ":" }
    COPY { "'" }
    ARROW { ">" }
    VERTEX { "<" }
    SIGMA { "&" }
    XI { "$" }
    MINUS { "-" }
    QUESTION { "?" }
    DOT { "." }
    LSQ { "[" }
    RSQ { "]" }
    LB { "(" }
    RB { ")" }
    AT { "@" }
    RHO { "^" }


    EMPTY_BYTES  { MINUS MINUS }
    BYTES{
        |  EMPTY_BYTES
        |  BYTE MINUS
        |  BYTE (MINUS BYTE)+
    }

    BOOL { "TRUE" | "FALSE" }
    CHAR {
        "'" (!['\\\r\n] | ESCAPE_SEQUENCE) "'" 
    }

    STRING { 
        "\"" (!["\\\r\n] | ESCAPE_SEQUENCE)* "\"" }

    ESCAPE_SEQUENCE {
        "\\" ($[btnfr] | "\"" | "'" | "\\")
        | "\\" ($[0-3]? $[0-7])? $[0-7]
        | "\\" "u" + EMPTY_BYTES EMPTY_BYTES
    }

    TEXT_MARK { "\"\"\"" }
    TEXT{
        TEXT_MARK ("\n" | "\r\n")
        (![\\] | ESCAPE_SEQUENCE)*?
        TEXT_MARK
    }

    INT { (PLUS | MINUS)? $[0-9]+ }
    FLOAT { (PLUS | MINUS)? $[0-9]+ DOT $[0-9]+ }
    HEX { "0x" $[0-9a-f]+ }
}

program {
    license?
    metas?
    objects
}

license { 
    // (COMMENT)+ 
}

metas {
    (META)+
}

objects { 
    (
        // (COMMENT)*
        object
    )+
}

object {
    anonymous | ( abstraction | application ) tail? ( method htail? suffix? tail? )*
}

anonymous {
  attributes
  htail
}

abstraction {
  // (COMMENT)*
  attributes (suffix (SLASH (NAME | QUESTION))?)?
}

attributes {
    LSQ (attribute (attribute)*)? RSQ
}

attribute {
    label
}

label {
  AT | NAME DOTS?
}

tail {
    (object)+
}

suffix { 
  ARROW label CONST?
}

method {
  DOT ( NAME COPY? | RHO | AT | VERTEX )
}



application { 
    head htail? 
  | application (method | has | suffix) htail?
  | LB application RB htail?
}

htail {
  ( head | application ( method | has | suffix) | LB application RB anonymous )+
}

head {
  DOTS? ( AT | RHO | XI | SIGMA | STAR | NAME (COPY? | DOT) | data)
}

has {
  COLON NAME
}

data {
  BYTES | BOOL | TEXT | STRING | INT | FLOAT | HEX | CHAR | REGEX
}

@detectDelim