@top   PhiGrammar {program}

@skip { SPACE } 

@tokens {  
  COMMENT{ HASH ![\r\n]*}
  META{ PLUS NAME (SPACE ![\r\n]+)?}
  
  STAR{ "*"}
  CONST{ "!"}
  COLON{ ":"}
    // COPY{ "\'"}
    // VERTEX{ "<"}
    // SIGMA{ "&"}
    // XI{ "$"}
    // QUESTION{ "?"}

  REGEX{ SLASH ![\r\n]+ SLASH}
  DOTS{ "..."}
  SLASH{ "/"}
  ARROW{ ">"}
  PLUS{ "+"}
  MINUS{ "-"}
  DOT{ "."}
  SPACE{std.whitespace+}
  LSQ[closedBy="RSQ"]{ "[" }
  RSQ[openedBy="LSQ"]{ "]"}
  LB[closedBy="RB"]{ "("}
  RB[openedBy="LB"]{ ")"}
  AT{ "@"}
  RHO{ "^"}
  HASH{ "#"}

  BYTE{ ($[0-9A-F])($[0-9A-F])}
  EMPTY_BYTES { MINUS MINUS}
  LINE_BYTES { BYTE (MINUS BYTE)*}

  BYTES {
      EMPTY_BYTES
    | LINE_BYTES
  }

  
  INT { (PLUS | MINUS)? ($[0-9] | $[1-9] $[0-9]+)}

  EXP { "e" (PLUS | MINUS)? $[0-9]+ }

  FLOAT { INT DOT $[0-9]* EXP?}

  BOOL{ "TRUE" | "FALSE"}
  CHAR{  "\'" (!["\\\r\n] | ESCAPE_SEQUENCE) "\'"}
  STRING{ "\"" (!["\\\r\n] | ESCAPE_SEQUENCE)* "\""}
  ESCAPE_SEQUENCE {
        "\\" $[btnfr"'\\]
      | "\\" ($[01]$[0-9]$[0-9] | "2"$[0-4]$[0-9] | "25" $[0-5])
      | "\\" "u" BYTE BYTE
  }
  
  HEX{ "0x" ($[0-9a-f])+}

  NAME{ $[a-z] ($[a-z]| $[_-] | $[0-9])*}

  TEXT_MARK{ "\"\"\""}
  TEXT{
      TEXT_MARK ("\n" | "\r\n")
      (![\\] | ESCAPE_SEQUENCE)*?
      TEXT_MARK
  }


  @precedence {FLOAT, INT, HEX, BYTES, META}
  @precedence {TEXT, STRING}
  @precedence {REGEX, SLASH}
}

NUMBER {
  (
      BYTES
    | INT
    | FLOAT
    | HEX
  )
}

attribute {
  AT | NAME | DOTS
}

attributes {
  LSQ attribute* RSQ
}


top {
  COMMENT*
  META*
}

// application {
//   LB  RB
// }

program {
  top
  (
      NUMBER
    | BOOL
    
    | REGEX

    | CHAR
    | STRING
    | TEXT
    
    | NAME
    | AT
    | RHO
    
    | ARROW
    | STAR
    | CONST
    | COLON
    | DOT
    | DOTS
    | SLASH

    | attributes
  )+
}

// program
//   {
//   license?
//   metas?
//   objects
//   // EOF
//   }

// license
//   {
//   (
//     COMMENT 
//     // EOL
//   )+
//   }

// metas
//   {
//   (
//     META 
//     // EOL
//   )+
//   }

// objects
//   {
//   (
//     (
//       COMMENT 
//       // EOL
//     )*
//     object
//     // EOL
//   )+
//   }

// object
//   {
//   anonymous
//   |
//   (
//     abstraction
//     |
//     application
//   )
//   tail?
//   (
//     // EOL
//     method
//     htail?
//     suffix?
//     tail?
//   )*
//   }

// anonymous
//   {
//   attributes
//   htail
//   }

// abstraction
//   {
//   (
//     COMMENT 
//     // EOL
//   )*
//   attributes
//   (suffix (SPACE SLASH (NAME | QUESTION))?)?
//   }

// attributes
//   {
//   LSQ
//   (attribute (
//     // SPACE 
//     attribute
//   )*)?
//   RSQ
//   }

// attribute
//   {
//   label
//   }

// label
//   {
//   AT
//   |
//   NAME
//   DOTS?
//   }

// tail
//   {
//   // EOL
//   // TAB
//   (
//     object 
//     // EOL
//   )+
//   // UNTAB
//   }

// suffix
//   {
//   // SPACE
//   ARROW
//   // SPACE
//   label
//   CONST?
//   }

// method
//   {
//   DOT
//   (
//     NAME
//     |
//     RHO
//     |
//     AT
//     |
//     VERTEX
//   )
//   }

// application
//   {
//   head
//   htail?
//   |
//   application
//   method
//   htail?
//   |
//   LB
//   application
//   RB
//   htail?
//   |
//   application
//   has
//   htail?
//   |
//   application
//   suffix
//   htail?
//   }

// htail
//   {
//   (
//     // SPACE
//     head
//     |
//     // SPACE
//     application
//     method
//     |
//     // SPACE
//     LB
//     application
//     RB
//     |
//     // SPACE
//     application
//     has
//     |
//     // SPACE
//     application
//     suffix
//     |
//     // SPACE
//     anonymous
//   )+
//   }

// head
//   {
//   DOTS?
//   (
//     ROOT
//     |
//     AT
//     |
//     RHO
//     |
//     XI
//     |
//     SIGMA
//     |
//     STAR
//     |
//     NAME
//     COPY?
//     |
//     NAME
//     DOT
//     |
//     data
//   )
//   }

// has
//   {
//   COLON
//   NAME
//   }

// data
//   {
//   BYTES
//   |
//   BOOL
//   |
//   TEXT
//   |
//   STRING
//   |
//   INT
//   |
//   FLOAT
//   |
//   HEX
//   |
//   CHAR
//   |
//   REGEX
//   }