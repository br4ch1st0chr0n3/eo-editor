@top   PhiGrammar {program}

@skip { SPACE } 

@tokens {  
  COMMENT{ HASH ![\r\n]*}
  META{ PLUS NAME (SPACE ![\r\n]+)?}
  
  STAR{ "*"}
  CONST{ "!"}
  COLON{ ":"}
    // COPY{ "\'"}
    // VERTEX{ "<"}
    // SIGMA{ "&"}
    // XI{ "$"}
    // QUESTION{ "?"}

  REGEX{ SLASH ![\r\n]+ SLASH}
  DOTS{ "..."}
  SLASH{ "/"}
  ARROW{ ">"}
  PLUS{ "+"}
  MINUS{ "-"}
  DOT{ "."}
  SPACE{std.whitespace+}
  LSQ[closedBy="RSQ"]{ "[" }
  RSQ[openedBy="LSQ"]{ "]"}
  LB[closedBy="RB"]{ "("}
  RB[openedBy="LB"]{ ")"}
  AT{ "@"}
  RHO{ "^"}
  HASH{ "#"}

  BYTE{ ($[0-9A-F])($[0-9A-F])}
  EMPTY_BYTES { MINUS MINUS}
  LINE_BYTES { BYTE (MINUS BYTE)*}

  BYTES {
      EMPTY_BYTES
    | LINE_BYTES
  }

  
  INT { (PLUS | MINUS)? ($[0-9] | $[1-9] $[0-9]+)}

  EXP { "e" (PLUS | MINUS)? $[0-9]+ }

  FLOAT { INT DOT $[0-9]* EXP?}

  BOOL{ "TRUE" | "FALSE"}
  CHAR{  "\'" (!["\\\r\n] | ESCAPE_SEQUENCE) "\'"}
  STRING{ "\"" (!["\\\r\n] | ESCAPE_SEQUENCE)* "\""}
  ESCAPE_SEQUENCE {
        "\\" $[btnfr"'\\]
      | "\\" ($[01]$[0-9]$[0-9] | "2"$[0-4]$[0-9] | "25" $[0-5])
      | "\\" "u" BYTE BYTE
  }
  
  HEX{ "0x" ($[0-9a-f])+}

  NAME{ $[a-z] ($[a-z]| $[_-] | $[0-9])*}

  TEXT_MARK{ "\"\"\""}
  TEXT{
      TEXT_MARK ("\n" | "\r\n")
      (![\\] | ESCAPE_SEQUENCE)*?
      TEXT_MARK
  }


  @precedence {FLOAT, INT, HEX, BYTES, META}
  @precedence {TEXT, STRING}
  @precedence {REGEX, SLASH}
}

NUMBER {
  (
      BYTES
    | INT
    | FLOAT
    | HEX
  )
}

attribute {
  AT | NAME | DOTS
}

attributes {
  LSQ attribute* RSQ
}


top {
  COMMENT*
  META*
}

program {
  top
  (
      NUMBER
    | BOOL
    
    | REGEX

    | CHAR
    | STRING
    | TEXT
    
    | NAME
    | AT
    | RHO
    
    | ARROW
    | STAR
    | CONST
    | COLON
    | DOT
    | DOTS
    | SLASH

    | attributes
  )+
}