@precedence {comment @left, foreign @right}

@top   PhiGrammar {PROGRAM}

// @skip { SPACE } 

@tokens {  
  COMMENT{ HASH ![\r\n]*}
  META{ PLUS NAME (space ![\r\n]+)?}
  
  STAR{ "*"}
  CONST{ "!"}
  COLON{ ":"}
  COPY{ "\'"}
  VERTEX{ "<"}
  ROOT{ 'Q'}
  SIGMA{ "&"}
  XI{ "$"}
  // QUESTION{ "?"}

  REGEX{ SLASH ![\r\n]+ SLASH}
  DOTS{ "..."}
  SLASH{ "/"}
  ARROW{ ">"}
  PLUS{ "+"}
  MINUS{ "-"}
  DOT{ "."}
  space{" "}
  LSQ[closedBy="RSQ"]{ "[" }
  RSQ[openedBy="LSQ"]{ "]"}
  LB[closedBy="RB"]{ "("}
  RB[openedBy="LB"]{ ")"}
  AT{ "@"}
  RHO{ "^"}
  HASH{ "#"}

  BYTE{ ($[0-9A-F])($[0-9A-F])}
  EMPTY_BYTES { MINUS MINUS}
  LINE_BYTES { BYTE (MINUS BYTE)*}

  BYTES {
      EMPTY_BYTES
    | LINE_BYTES
  }

  
  INT { (PLUS | MINUS)? ($[0-9] | $[1-9] $[0-9]+)}

  EXP { "e" (PLUS | MINUS)? $[0-9]+ }

  FLOAT { INT DOT $[0-9]* EXP?}

  BOOL{ "TRUE" | "FALSE"}
  CHAR{  "\'" (!["\\\r\n] | ESCAPE_SEQUENCE) "\'"}
  STRING{ "\"" (!["\\\r\n] | ESCAPE_SEQUENCE)* "\""}
  ESCAPE_SEQUENCE {
        "\\" $[btnfr"'\\]
      | "\\" ($[01]$[0-9]$[0-9] | "2"$[0-4]$[0-9] | "25" $[0-5])
      | "\\" "u" BYTE BYTE
  }
  
  HEX{ "0x" ($[0-9a-f])+}

  NAME{ "@" | $[a-z] ($[a-z0-9]| $[_-])*}
  FOREIGN_NAME {$[a-z] ($[a-z0-9]| $[_-])*}

  TEXT_MARK{ "\"\"\""}
  TEXT{
      TEXT_MARK ("\n" | "\r\n")
      (![\\] | ESCAPE_SEQUENCE)*?
      TEXT_MARK
  }

  EOL {"\n"}

  @precedence {FLOAT, INT, HEX, BYTES, META}
  @precedence {TEXT, STRING}
  @precedence {REGEX, SLASH}
}

LICENSE
{
  (
    (!comment COMMENT)
    EOL
  )+
}

METAS
{
  (
    META
    EOL
  )+
}

DATA
{
  BYTES
  |
  BOOL
  |
  TEXT
  |
  STRING
  |
  INT
  |
  FLOAT
  |
  HEX
  |
  CHAR
  |
  REGEX
}

DECLARATION
{
  // 
  NAME
  CONST?
  (
    !foreign
    (
      space
      SLASH
      FOREIGN_NAME
    )
  )?
  space
  ARROW
  space
  LSQ
  (
    NAME
    (
      space
      NAME
    )*
    DOTS?
  )?
  RSQ
}

METHOD
{
  ID
  (
    DOT
    ID
  )+
  DECLARATION?
}


HEAD
{
  ROOT
  |
  AT
  |
  RHO
  |
  XI
  |
  SIGMA
  |
  STAR
  |
  NAME
}

HAS
{
  COLON
  NAME
}

PROGRAM
{
  LICENSE?
  METAS?
  EOL+
  OBJECTS
}
  
SPACES {space*}

OBJECTS
{
  (
    (
      !comment COMMENT 
      EOL
    )*
    SPACES
    OBJECT
    // EOL
  )+
}

// --------------------------------
// main non-terminals
// --------------------------------

OBJECT 
{
  DECLARATION
  // DEFINITION?
}

// DEFINITION
// {
//   OBJECT*
//   |
  
// }
// _object
//   {
//   anonymous
//   |
//   (
//     abstraction
//     |
//     application
//   )
//   tail?
//   (
//     // EOL
//     method
//     htail?
//     suffix?
//     tail?
//   )*
//   }

// _anonymous
//   {
//   attributes
//   htail
//   }

// _tail
//   {
//   // EOL
//   // TAB
//   (
//     object 
//     // EOL
//   )+
//   // UNTAB
//   }

// _application
//   {
//   head
//   htail?
//   |
//   application
//   (
//     method
//     |
//     has
//     |
//     suffix
//   )
//   htail?
//   |
//   LB
//   application
//   RB
//   htail?
//   }

// _htail
//   {
//   (
//     // SPACE
//     head
//     |
//     // SPACE
//     application
//     (
//       method 
//       | 
//       has
//       |
//       suffix
//     )
//     |
//     // SPACE
//     LB
//     application
//     RB
//     |
//     // SPACE
//     anonymous
//   )+
//   }

// # 1
// vector > [dx dy]
//   sqrt. > length
//     add.
//       dx.pow 2
//       dy.pow 2
//   add. > sum 
//     dx
//     dy

// # 2
// vector > [dx dy]
//   length >
//     sqrt.
//       add.
//         dx.pow 2
//         dy.pow 2
//   sum >
//     add.
//       dx
//       dy